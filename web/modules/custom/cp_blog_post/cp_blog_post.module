<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
function cp_blog_post_preprocess_node (&$variables) {
  /** @var NodeInterface $node */
  $node = $variables['node'];
  
  if ($node->bundle() == 'blog_post' && $variables['view_mode']  == "full") {
    $fieldTagsValues = $node->get('field_tags')->getValue();
    $tids = array_map(function($value){
      return $value['target_id'];
    },$fieldTagsValues);
    $entityTypeManager = Drupal::entityTypeManager();
    $nodeStorage = $entityTypeManager->getStorage('node');
    $query = $nodeStorage->getQuery();
    $query->condition('type', 'blog_post')
      ->condition('status',TRUE)
      ->condition('field_tags',$tids, 'IN')
      ->condition('nid',$node->id(), '<>')
      ->sort('changed', 'DESC')
      ->range(0,3);
    $nids = $query->execute();
    if (!empty($nids)) {
      $nodeObjects = $nodeStorage->loadMultiple($nids);
      $nodeViewBuilder = $entityTypeManager->getViewBuilder('node');
      $view_mode = 'teaser';
      $variables['related_nodes'] = $nodeViewBuilder->viewMultiple($nodeObjects, $view_mode);
    }
  }
  if ($node->bundle() == 'home' && $variables['view_mode']  == "full") {
    $promotedBlogPost = [];
    // votre code ici
   
    $fieldTagsValues = $node->get('field_promote')->getValue();
    $tids = array_map(function($value){
      return $value['target_id'];
    },$fieldTagsValues);
    $entityTypeManager = Drupal::entityTypeManager();
    $nodeStorage = $entityTypeManager->getStorage('node');
    $query = $nodeStorage->getQuery();
    $query->condition('type', 'blog_post')
      ->condition('status',TRUE)
      ->condition('field_promote',TRUE)
      ->sort('created', 'DESC')
      ->range(0,3);
     
    $missingCount= 3 - count($nids);

    if($missingCount >0){
        $query = $nodeStorage->getQuery();
    $query->condition('type', 'blog_post')
      ->condition('status',TRUE)
      ->condition('field_promote',FALSE)
      ->sort('created', 'DESC')
      ->range(0,$missingCount);
    
      $nidsBonus = $query->execute();
    $nids = array_merge($nids,$nidsBonus);

  }
    $nids = $query->execute();
    if (!empty($nids)) {
      $nodeObjects = $nodeStorage->loadMultiple($nids);
    //  $nodeViewBuilder = $entityTypeManager->getViewBuilder('node');
      $view_mode = 'teaser';

    $variables['promoted_blog_posts'] = $promotedBlogPost;
  }
}
}
function cp_blog_post_preprocess_item_list (&$variables) {
  if (Drupal::routeMatch()->getRouteName() == 'cp_blog_post.blog') {
    foreach ($variables['items'] as $item) {
      /** @var Drupal\Core\Template\Attribute $attributes */
      $attributes = $item['attributes'];
      $attributes->addClass('BlogList-item');
    }
  }
}


function cp_blog_post_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  $node = $form_object->getEntity();
  // Make sure it's a node.
  if ($node instanceof NodeInterface) {
    $bundle = $node->bundle();
    if ($bundle == "blog_post") {
      //$form['status']['widget']['value']['#default_value'] = FALSE;
      //$form['field_intro']['widget'][0]['value']['#disabled'] = TRUE;
    }
  }
}


function cp_blog_post_theme($existing, $type, $theme, $path){
  return [
    'cp_blog_post_blog_list' => [
      'render element' => 'children',
      'variables' => [
        'nodes' => [],
      ],
    ],
  ];
}
